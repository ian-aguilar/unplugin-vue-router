export function generateDTS({
  vueRouterModule,
  routesModule,
  routeNamedMap,
}: {
  vueRouterModule: string
  routesModule: string
  routeNamedMap: string
}) {
  return `/* eslint-disable */
/* prettier-ignore */
// @ts-nocheck
// Generated by unplugin-vue-router. ‼️ DO NOT MODIFY THIS FILE ‼️
// It's recommended to commit this file.
// Make sure to add this file to your tsconfig.json file as an "includes" or "files" entry.

/// <reference types="unplugin-vue-router/client" />

import type {
  // type safe route locations
  RouteLocationTypedList,
  RouteLocationResolvedTypedList,
  RouteLocationNormalizedTypedList,
  RouteLocationNormalizedLoadedTypedList,
  RouteLocationAsString,
  RouteLocationAsRelativeTypedList,
  RouteLocationAsPathTypedList,

  // helper types
  // route definitions
  RouteRecordInfo,
  ParamValue,
  ParamValueOneOrMore,
  ParamValueZeroOrMore,
  ParamValueZeroOrOne,

  // vue-router extensions
  _RouterTyped,
  RouterLinkTyped,
  RouterLinkPropsTyped,
  // NOTE: Must be renamed to avoid conflict with vue-router and work within declare module 'vue-router'
  NavigationGuard as NavigationGuardTyped,
  NavigationGuardWithThis as NavigationGuardWithThisTyped,
  UseLinkFnTyped,

  // data fetching
  _DefineLoaderFn,
  _DefineDataLoaderOptions,
  _DataLoaderContext,
  _UseDataLoader,
} from 'unplugin-vue-router/types'

declare module '${routesModule}' {
${routeNamedMap}
}

declare module 'unplugin-vue-router/types' {
  import type { RouteNamedMap } from '${routesModule}'

  export interface _TypesConfig {
    RouteNamedMap: RouteNamedMap
  }
}

declare module '${vueRouterModule}' {
  import type { RouteNamedMap } from '${routesModule}'

  export type RouterTyped = _RouterTyped<RouteNamedMap>

  export function useRouter(): RouterTyped
  export function useRoute<Name extends keyof RouteNamedMap = keyof RouteNamedMap>(name?: Name): RouteLocationNormalizedLoadedTypedList<RouteNamedMap>[Name]

  export const useLink: UseLinkFnTyped<RouteNamedMap>

  export function onBeforeRouteLeave(guard: NavigationGuardTyped): void
  export function onBeforeRouteUpdate(guard: NavigationGuardTyped): void

  export const RouterLink: RouterLinkTyped<RouteNamedMap>
  export const RouterLinkProps: RouterLinkPropsTyped<RouteNamedMap>

  // Experimental Data Fetching

  export {
    _definePage as definePage,

    DataLoaderPlugin,
    _setupLoaderGuard as setupLoaderGuard,

    // FIXME: remove these in next major
    _HasDataLoaderMeta as HasDataLoaderMeta,
    _setupDataFetchingGuard as setupDataFetchingGuard,
    _stopDataFetchingScope as stopDataFetchingScope,
  } from 'unplugin-vue-router/runtime'
}

declare module 'vue-router' {
  import type { RouteNamedMap } from '${routesModule}'

  export interface TypesConfig {
    beforeRouteEnter: NavigationGuardWithThisTyped<undefined>
    beforeRouteUpdate: NavigationGuardTyped
    beforeRouteLeave: NavigationGuardTyped

    $route: RouteLocationNormalizedLoadedTypedList<RouteNamedMap>[keyof RouteNamedMap]
    $router: _RouterTyped<RouteNamedMap>

    RouterLink: RouterLinkTyped<RouteNamedMap>
  }
}
`
}

// TODO: move the Name generic to the type of the loaders. Create an extendable interface for the loaders so they get augmented automatically
